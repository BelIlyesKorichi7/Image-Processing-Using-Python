import numpy as np

import matplotlib.pyplot as plt

import matplotlib.image as mplimg

from PIL import Image as pilimg

from math import floor

import math

def return_filter_canny(path_img, low_thRatio=0.05, high_thRatio=0.09):
    
    #Load and read the image from its location path and save it in a named variable input_img
    
    input_img = pilimg.open(path_img)
    
    #Convert image to grayscale
    
    gray_level_img = np.array(input_img.convert('L'))
    
    #Obtain the lengths of the input image in the gray level
    
    height, width = gray_level_img.shape[:2]
    
    # Initialize empty arrays for gradient magnitude and direction
    
    grad_mag = np.zeros_like(gray_level_img)
    
    grad_dir = np.zeros_like(gray_level_img)
    
    # Define the Sobel filters in x or y directions
    
    gaussian_kernel = np.array([[0.0275, 0.1102, 0.0275], [0.1102, 0.4421, 0.1102], [0.0275, 0.1102, 0.0275]])
        
    sobel_x = np.array([[-1, -2, -1], [0, 0, 0], [1, 2, 1]])
        
    sobel_y = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])
    
    #We reserve an empty template corresponding to the input image scales in the gray level
    
    #to which we assign the final optimized image pixel values
    
    output_img_result = np.zeros((height, width), dtype='u1')
    
    for y in range(0, width - 3):
        
        for x in range(0, height - 3):
            
            sub_matrix = gray_level_img[x : x + 3, y : y + 3]
            
            #finaly the value of the latter we transfer to its coordinates in the blank template of the new output image
            
            filtered_pixel_value = np.sum(gaussian_kernel * sub_matrix)
            
            output_img_result[x, y] = filtered_pixel_value
    
    for y in range(0, width - 3):
        
        for x in range(0, height - 3):
            
            sub_matrix = output_img_result[x : x + 3, y : y + 3]
            
            gpixel_value_x = np.sum(sobel_x * sub_matrix)
            
            gpixel_value_y = np.sum(sobel_y * sub_matrix)
            
            grad_mag[x + 1,y + 1] = np.sqrt(gpixel_value_x**2 + gpixel_value_y**2)
            
            grad_dir[x + 1,y + 1] = np.arctan2(gpixel_value_y, gpixel_value_x)
    
    # Initialize empty array for edge points
    
    edge_points = np.zeros_like(grad_mag)
    
    # Loop through each pixel and perform non-maximum suppression
    
    for j in range(1, height - 1):
        
        for i in range(1, width - 1):
            
            try:
                
                angle = grad_dir[ i, j ]
                
                min_value = 255
                
                max_value = 255
                
                #angle 0
            
                if (0 <= angle < 22.5) or (157.5 <= angle <= 180): 
                
                    max_value = grad_mag[ i, j + 1 ]
                
                    min_value = grad_mag[ i, j - 1 ]
                
                #angle 45
            
                elif (22.5 <= angle[ i, j ] < 67.5):
                
                    min_value = grad_mag[ i + 1, j - 1 ]
                
                    max_value = grad_mag[ i - 1, j + 1 ]
                
                #angle 90
            
                elif (67.5 <= angle[i, j ] < 112.5):
                
                    min_value = grad_mag[ i + 1, j ]
                
                    max_value = grad_mag[ i - 1, j ]
                
                #angle 135
            
                elif (112.5 <= angle[i,j] < 157.5):
                
                    min_value = grad_mag[ i - 1, j - 1 ]
                
                    max_value = grad_mag[ i + 1, j + 1 ]
                

                if (grad_mag[ i, j ] >= min_value) and (grad_mag[ i, j ] >= max_value):
                
                    edge_points[ i ,j ] = grad_mag[ i ,j ]
                
                else:
                
                    edge_points[ i ,j ] = 0

            except IndexError as e:
                pass
    
    # Loop through each pixel and perform hysteresis thresholding
    
    strong_edges = np.zeros_like(edge_points)
    
    weak_edges = np.zeros_like(edge_points)
    
    strong = np.int32(255)
    
    weak = np.int32(25)
    
    high_threshold = edge_points.max() * high_thRatio;
    
    low_threshold = high_threshold * low_thRatio;
    
    strong_i, strong_j = np.where(edge_points >= high_threshold)
                
    strong_edges[ strong_i, strong_j ] = strong
    
    weak_i, weak_j = np.where((edge_points <= high_threshold) & (edge_points >= low_threshold))
                
    weak_edges[ weak_i, weak_j ] = weak
                
    fig, axs = plt.subplots(1, 2)

    axs[0].imshow(weak_edges, cmap='gray')

    axs[0].set_title('Weak')

    axs[1].imshow(strong_edges, cmap='gray')

    axs[1].set_title('Strong')

    plt.show()

return_filter_laplacian("FB_IMG_15992225962312859.jpg", "a")
